<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.    z
-->

<!--
 This is the Solr schema file. This file should be named "schema.xml" and
 should be in the conf directory under the solr home
 (i.e. ./solr/conf/schema.xml by default)
 or located where the classloader for the Solr webapp can find it.

 This example schema is the recommended starting point for users.
 It should be kept correct and concise, usable out-of-the-box.

 For more information, on how to customize this file, please see
 http://wiki.apache.org/solr/SchemaXml
-->

<schema name="titanIndex" version="1.1">
    <!-- attribute "name" is the name of this schema and is only used for display purposes.
         Applications should change this to reflect the nature of the search collection.
         version="1.1" is Solr's version number for the schema syntax and semantics.  It should
         not normally be changed by applications.
         1.0: multiValued attribute did not exist, all fields are multiValued by nature
         1.1: multiValued attribute introduced, false by default -->

    <types>
        <!-- field type definitions. The "name" attribute is
           just a label to be used by field definitions.  The "class"
           attribute and any other attributes determine the real
           behavior of the fieldType.
             Class names starting with "solr" refer to java classes in the
           org.apache.solr.analysis package.
        -->

        <!-- The StrField type is not analyzed, but indexed/stored verbatim.
           - StrField and TextField support an optional compressThreshold which
           limits compression (if enabled in the derived fields) to values which
           exceed a certain size (in characters).
        -->
        <fieldType name="string" class="solr.StrField" sortMissingLast="true" omitNorms="true"/>

        <!-- boolean type: "true" or "false" -->
        <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true" omitNorms="true"/>

        <!-- The optional sortMissingLast and sortMissingFirst attributes are
             currently supported on types that are sorted internally as strings.
           - If sortMissingLast="true", then a sort on this field will cause documents
             without the field to come after documents with the field,
             regardless of the requested sort order (asc or desc).
           - If sortMissingFirst="true", then a sort on this field will cause documents
             without the field to come before documents with the field,
             regardless of the requested sort order.
           - If sortMissingLast="false" and sortMissingFirst="false" (the default),
             then default lucene sorting will be used which places docs without the
             field first in an ascending sort and last in a descending sort.
        -->


        <!-- numeric field types that store and index the text
             value verbatim (and hence don't support range queries, since the
             lexicographic ordering isn't equal to the numeric ordering) -->
        <fieldType name="integer" class="solr.IntField" omitNorms="true"/>
        <fieldType name="long" class="solr.LongField" omitNorms="true"/>
        <fieldType name="float" class="solr.FloatField" omitNorms="true"/>
        <fieldType name="double" class="solr.DoubleField" omitNorms="true"/>


        <!-- Numeric field types that manipulate the value into
             a string value that isn't human-readable in its internal form,
             but with a lexicographic ordering the same as the numeric ordering,
             so that range queries work correctly. -->
        <fieldType name="sint" class="solr.SortableIntField" sortMissingLast="true" omitNorms="true"/>
        <fieldType name="slong" class="solr.SortableLongField" sortMissingLast="true" omitNorms="true"/>
        <fieldType name="sfloat" class="solr.SortableFloatField" sortMissingLast="true" omitNorms="true"/>
        <fieldType name="sdouble" class="solr.SortableDoubleField" sortMissingLast="true" omitNorms="true"/>


        <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
             is a more restricted form of the canonical representation of dateTime
             http://www.w3.org/TR/xmlschema-2/#dateTime
             The trailing "Z" designates UTC time and is mandatory.
             Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
             All other components are mandatory.

             Expressions can also be used to denote calculations that should be
             performed relative to "NOW" to determine the value, ie...

                   NOW/HOUR
                      ... Round to the start of the current hour
                   NOW-1DAY
                      ... Exactly 1 day prior to now
                   NOW/DAY+6MONTHS+3DAYS
                      ... 6 months and 3 days in the future from the start of
                          the current day

             Consult the DateField javadocs for more information.
          -->
        <fieldType name="date" class="solr.DateField" sortMissingLast="true" omitNorms="true"/>


        <!-- The "RandomSortField" is not used to store or search any
             data.  You can declare fields of this type it in your schema
             to generate psuedo-random orderings of your docs for sorting
             purposes.  The ordering is generated based on the field name
             and the version of the index, As long as the index version
             remains unchanged, and the same field name is reused,
             the ordering of the docs will be consistent.
             If you want differend psuedo-random orderings of documents,
             for the same version of the index, use a dynamicField and
             change the name
         -->
        <fieldType name="random" class="solr.RandomSortField" indexed="true" />

        <!-- solr.TextField allows the specification of custom text analyzers
             specified as a tokenizer and a list of token filters. Different
             analyzers may be specified for indexing and querying.

             The optional positionIncrementGap puts space between multiple fields of
             this type on the same document, with the purpose of preventing false phrase
             matching across fields.

             For more info on customizing your analyzer chain, please see
             http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters
         -->

        <!-- One can also specify an existing Analyzer class that has a
             default constructor via the class attribute on the analyzer element
        <fieldType name="text_greek" class="solr.TextField">
          <analyzer class="org.apache.lucene.analysis.el.GreekAnalyzer"/>
        </fieldType>
        -->

        <!-- A text field that only splits on whitespace for exact matching of words -->
        <fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
            <analyzer>
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            </analyzer>
        </fieldType>

        <!-- A text field that uses WordDelimiterFilter to enable splitting and matching of
            words on case-change, alpha numeric boundaries, and non-alphanumeric chars,
            so that a query of "wifi" or "wi fi" could match a document containing "Wi-Fi".
            Synonyms and stopwords are customized by external files, and stemming is enabled.
            Duplicate tokens at the same position (which may result from Stemmed Synonyms or
            WordDelim parts) are removed.
            -->
        <fieldType name="text" class="solr.TextField" positionIncrementGap="100">
            <analyzer type="index">
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <!-- in this example, we will only use synonyms at query time
                <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
                -->
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
                <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="1"/>
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
                <filter class="solr.PorterStemFilterFactory"/>
                <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
            </analyzer>
            <analyzer type="query">
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
                <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
                <filter class="solr.PorterStemFilterFactory"/>
                <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
            </analyzer>
        </fieldType>


        <!-- Less flexible matching, but less false matches.  Probably not ideal for product names,
             but may be good for SKUs.  Can insert dashes in the wrong place and still match. -->
        <fieldType name="textTight" class="solr.TextField" positionIncrementGap="100" >
            <analyzer>
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
                <filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
                <filter class="solr.EnglishMinimalStemFilterFactory"/>
                <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
            </analyzer>
        </fieldType>

        <!-- This is an example of using the KeywordTokenizer along
             With various TokenFilterFactories to produce a sortable field
             that does not include some properties of the source text
          -->
        <fieldType name="alphaOnlySort" class="solr.TextField" sortMissingLast="true" omitNorms="true">
            <analyzer>
                <!-- KeywordTokenizer does no actual tokenizing, so the entire
                     input string is preserved as a single token
                  -->
                <tokenizer class="solr.KeywordTokenizerFactory"/>
                <!-- The LowerCase TokenFilter does what you expect, which can be
                     when you want your sorting to be case insensitive
                  -->
                <filter class="solr.LowerCaseFilterFactory" />
                <!-- The TrimFilter removes any leading or trailing whitespace -->
                <filter class="solr.TrimFilterFactory" />
                <!-- The PatternReplaceFilter gives you the flexibility to use
                     Java Regular expression to replace any sequence of characters
                     matching a pattern with an arbitrary replacement string,
                     which may include back refrences to portions of the orriginal
                     string matched by the pattern.

                     See the Java Regular Expression documentation for more
                     infomation on pattern and replacement string syntax.

                     http://java.sun.com/j2se/1.6.0/docs/api/java/util/regex/package-summary.html
                  -->
                <filter class="solr.PatternReplaceFilterFactory"
                        pattern="([^a-z])" replacement="" replace="all"
                        />
            </analyzer>
        </fieldType>

        <!-- since fields of this type are by default not stored or indexed, any data added to
             them will be ignored outright
         -->
        <fieldType name="ignored" stored="false" indexed="false" class="solr.StrField" />

        <!-- Geospatial type for indexing locations -->
        <fieldType name="geo"
                   class="solr.SpatialRecursivePrefixTreeFieldType"
                   spatialContextFactory="com.spatial4j.core.context.jts.JtsSpatialContextFactory"
                   distErrPct="0.000"
                   maxDistErr="0.000009"
                   units="degrees"
		   prefixTree="geohash"/>

    </types>


    <fields>
        <!-- Valid attributes for fields:
          name: mandatory - the name for the field
          type: mandatory - the name of a previously defined type from the <types> section
          indexed: true if this field should be indexed (searchable or sortable)
          stored: true if this field should be retrievable
          multiValued: true if this field may contain multiple values per document
          omitNorms: (expert) set to true to omit the norms associated with
            this field (this disables length normalization and index-time
            boosting for the field, and saves some memory).  Only full-text
            fields or fields that need an index-time boost need norms.
          termVectors: [false] set to true to store the term vector for a given field.
            When using MoreLikeThis, fields used for similarity should be stored for
            best performance.
        -->


        <!--
            Used by SolrCloud to do optimistic locking. If you don't have it, SolrCloud no worky
        -->
        <field name="_version_" type="long" indexed="true" stored="true" multiValued="false"/>


        <!--
            Entity field definitions
        -->
        <field name="document_id" type="string" indexed="true" stored="true" multiValued="false" />
        <field name="text" type="text" indexed="true" stored="true" multiValued="false" />
        <field name="time" type="slong" indexed="true" stored="true" multiValued="false" />
        <field name="weight" type="sfloat" indexed="true" stored="true" multiValued="false" />
        <!-- location will store any geospatial points located in document (o or more)-->
        <field name="location" type="geo" indexed="true" stored="true" multiValued="true" />

        <!--<field name="sku" type="textTight" indexed="true" stored="true" omitNorms="true"/>-->
        <!--<field name="name" type="text" indexed="true" stored="true"/>-->
        <!--<field name="nameSort" type="string" indexed="true" stored="false"/>-->
        <!--<field name="alphaNameSort" type="alphaOnlySort" indexed="true" stored="false"/>-->
        <!--<field name="manu" type="text" indexed="true" stored="true" omitNorms="true"/>-->
        <!--<field name="cat" type="text_ws" indexed="true" stored="true" multiValued="true" omitNorms="true" termVectors="true" />-->
        <!--<field name="features" type="text" indexed="true" stored="true" multiValued="true"/>-->
        <!--<field name="includes" type="text" indexed="true" stored="true"/>-->

        <!--<field name="weight" type="sfloat" indexed="true" stored="true"/>-->
        <!--<field name="price"  type="sfloat" indexed="true" stored="true"/>-->
        <!-- "default" values can be specified for fields, indicating which
             value should be used if no value is specified when adding a document.
          -->
        <!--<field name="popularity" type="sint" indexed="true" stored="true" default="0"/>-->
        <!--<field name="inStock" type="boolean" indexed="true" stored="true"/>-->

        <!-- Some sample docs exists solely to demonstrate the spellchecker
             functionality, this is the only field they container.
             Typically you might build the spellchecker of "catchall" type field
             containing all of the text in each document
          -->
        <!--<field name="word" type="string" indexed="true" stored="true"/>-->


        <!-- catchall field, containing all other searchable text fields (implemented
             via copyField further on in this schema  -->
        <!--<field name="text" type="text" indexed="true" stored="false" multiValued="true"/>-->

        <!-- non-tokenized version of manufacturer to make it easier to sort or group
             results by manufacturer.  copied from "manu" via copyField -->
        <!--<field name="manu_exact" type="string" indexed="true" stored="false"/>-->

        <!-- Dynamic field definitions.  If a field name is not found, dynamicFields
             will be used if the name matches any of the patterns.
             RESTRICTION: the glob-like pattern in the name attribute must have
             a "*" only at the start or the end.
             EXAMPLE:  name="*_i" will match any field ending in _i (like myid_i, z_i)
             Longer patterns will be matched first.  if equal size patterns
             both match, the first appearing in the schema will be used.  -->
        <dynamicField name="*_i"    type="sint"     indexed="true"  stored="true"/>
        <dynamicField name="*_s"    type="string"   indexed="true"  stored="true"/>
        <dynamicField name="*_l"    type="slong"    indexed="true"  stored="true"/>
        <dynamicField name="*_t"    type="text"     indexed="true"  stored="true"/>
        <dynamicField name="*_b"    type="boolean"  indexed="true"  stored="true"/>
        <dynamicField name="*_f"    type="sfloat"   indexed="true"  stored="true"/>
        <dynamicField name="*_d"    type="sdouble"  indexed="true"  stored="true"/>
        <dynamicField name="*_dt"   type="date"     indexed="true"  stored="true"/>
        <!--<dynamicField name="*_guid" type="text"     indexed="true"  stored="true"/>-->
        <!--<dynamicField name="*_name" type="text"     indexed="true"  stored="true"/>-->

        <dynamicField name="random*" type="random" />

        <!-- uncomment the following to ignore any fields that don't already match an existing
             field name or dynamic field, rather than reporting them as an error.
             alternately, change the type="ignored" to some other type e.g. "text" if you want
             unknown fields indexed and/or stored by default -->
        <!--dynamicField name="*" type="ignored" multiValued="true" /-->

    </fields>

    <!-- Field to use to determine and enforce document uniqueness.
         Unless this field is marked with required="false", it will be a required field
      -->
    <uniqueKey>document_id</uniqueKey>

    <!-- field for the QueryParser to use when an explicit fieldname is absent -->
    <defaultSearchField>text</defaultSearchField>

    <!-- SolrQueryParser configuration: defaultOperator="AND|OR" -->
    <solrQueryParser defaultOperator="OR"/>

    <!-- copyField commands copy one field to another at the time a document
          is added to the index.  It's used either to index the same field differently,
          or to add multiple fields to the same field for easier/faster searching.  -->

    <!--<copyField source="cat" dest="text"/>-->
    <!--<copyField source="name" dest="text"/>-->
    <!--<copyField source="name" dest="nameSort"/>-->
    <!--<copyField source="name" dest="alphaNameSort"/>-->
    <!--<copyField source="manu" dest="text"/>-->
    <!--<copyField source="features" dest="text"/>-->
    <!--<copyField source="includes" dest="text"/>-->

    <!--<copyField source="manu" dest="manu_exact"/>-->


    <!-- Similarity is the scoring routine for each document vs. a query.
         A custom similarity may be specified here, but the default is fine
         for most applications.  -->
    <!-- <similarity class="org.apache.lucene.search.similarities.DefaultSimilarity"/> -->

</schema>
