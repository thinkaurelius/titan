<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.thinkaurelius.titan</groupId>
        <artifactId>titan</artifactId>
        <version>0.4.1-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <packaging>pom</packaging>
    <artifactId>titan-dist</artifactId>
    <name>Titan-Dist: Supermodule for Tar and Zip Archives</name>
    <url>http://thinkaurelius.github.com/titan/</url>

    <!--
      I resorted to a submodule build after several misadventures.
      First, there's this:

      https://jira.codehaus.org/browse/MASSEMBLY-614

      I tried a single module build with multiple descriptors using
      <includes> filtering, but that led to odd dependency inclusion
      logic.  I might have made a mistake elsewhere, but it seemed
      like the assembly plugin was halting dependency traversal at
      titan artifacts.  My cassandra assembly would end up with all of
      titan-cassandra's dependencies except titan-core, titan-es, etc
      and their dependencies.

      I now tiptoe around that case with a combination of include and
      exclude filtering in each of the submodule descriptors.  There's
      a lot of duplicated descriptor and pom.xml text, and this could
      probably be folded back into a single submodule, but I'm loath
      to touch it again at the moment and potentially spend time
      trying to debug it again.
    -->
    <modules>
        <module>titan-dist-all</module>
        <module>titan-dist-berkeleyje</module>
        <module>titan-dist-cassandra</module>
        <module>titan-dist-hbase</module>
        <module>titan-dist-accumulo</module>
        <module>titan-dist-hazelcast</module>
        <module>titan-dist-server</module>
    </modules>

    <properties>
      <pkgtools.dir>${project.basedir}/..</pkgtools.dir>
    </properties>

    <dependencies>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>titan-core</artifactId>
            <version>${project.version}</version>
            <classifier>${titan.classifier}</classifier>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
	    <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.velocity</groupId>
            <artifactId>velocity</artifactId>
            <version>1.7</version>
	    <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
	    <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <resources>
            <resource>
                <directory>src/util-scripts</directory>
                <filtering>true</filtering>
            </resource>
        </resources>

        <plugins>
            <!--
              Filter the shell scripts in src/util-scripts during the
              process-resources phase.  Disable default resource goal
              bindings because we have no main or test resources.
            -->
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <inherited>false</inherited>
                        <id>filter-util-script-resources</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/util-scripts</outputDirectory>
                            <useDefaultDelimiters>false</useDefaultDelimiters>
                            <delimiters>
                                <delimiter>$MAVEN{*}</delimiter>
                            </delimiters>
                        </configuration>
                    </execution>
                    <execution>
                        <id>default-resources</id>
                        <phase>none</phase>
                    </execution>
                    <execution>
                        <id>default-testResources</id>
                        <phase>none</phase>
                    </execution>
                </executions>
            </plugin>

            <!--
              We use maven-resources-plugin to filter util-scripts,
              but that plugin has an open bug about the fact that it
              doesn't copy file permissions during filtering.  Make
              the script executable with chmod.  Not portable.
         
              Bug: http://jira.codehaus.org/browse/MRESOURCES-132
            -->
            <plugin>
                <inherited>false</inherited>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>fix-script-permissions</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>chmod</executable>
                            <arguments>
                                <argument>-R</argument>
                                <argument>ug+x</argument>
                                <argument>${project.build.directory}/util-scripts/</argument>
                            </arguments>
                            <workingDirectory>${project.parent.basedir}/doc</workingDirectory>
                        </configuration>
                    </execution>
                    
                    <execution>
                        <id>generate-titan-gremlin-imports</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>com.thinkaurelius.titan.tinkerpop.gremlin.ConsoleSetup</mainClass>
                            <arguments>
                                <argument>${project.build.directory}/imports.properties</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <executions>
                    <execution>
                        <id>compile-tests</id>
			<phase>test-compile</phase>
			<goals>
  			    <goal>testCompile</goal>
			</goals>
		    </execution>
		</executions>
	    </plugin>

            <plugin>
                <artifactId>maven-jar-plugin</artifactId>
                <executions>
                    <execution>
                        <id>pack-test-jar</id>
			<phase>package</phase>
			<goals>
  			    <goal>test-jar</goal>
			</goals>
		    </execution>
		</executions>
	    </plugin>
        </plugins>
    </build>

    <profiles>
        
        <profile>
            <id>jre7</id>
        
            <activation>
                <property>
                    <name>!targetjre</name>
                </property>
            </activation>

            <modules>
                <module>titan-dist-persistit</module>
            </modules>
        </profile>
        
        <profile>
            <id>pkg-tools</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <version>1.8</version>
                        <inherited>false</inherited>
                        <executions>
                            <execution>
                                <id>set-version-properties</id>
                                <phase>generate-resources</phase>
                                <goals>
                                    <goal>parse-version</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-assembly-plugin</artifactId>
                        <inherited>false</inherited>
                        <executions>
                            <execution>
                                <id>assemble-package-tools</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>single</goal>
                                </goals>
                                <configuration> 
                                    <attach>false</attach>
                                    <outputDirectory>${pkgtools.dir}/</outputDirectory>
                                    <finalName>/</finalName>
                                    <appendAssemblyId>false</appendAssemblyId>
                                    <descriptors>
                                        <descriptor>assembly-pkg.xml</descriptor>
                                    </descriptors>
                                </configuration>
                            </execution>
                            <execution>
                                <id>assemble-distribution-archive</id>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-clean-plugin</artifactId>
                        <inherited>false</inherited>
                        <executions>
                            <execution>
                                <id>clean-package-tools</id>
                                <phase>clean</phase>
                                <goals>
                                    <goal>clean</goal>
                                </goals>
                                <configuration> 
                                    <excludeDefaultDirectories>true</excludeDefaultDirectories>
                                    <filesets>
                                        <fileset>
                                            <directory>${pkgtools.dir}/debian/</directory>
                                        </fileset>
                                        <fileset>
                                            <directory>${pkgtools.dir}/pkgcommon/</directory>
                                        </fileset>
                                        <fileset>
                                            <directory>${pkgtools.dir}/redhat/</directory>
                                        </fileset>
                                    </filesets>
                                </configuration> 
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
